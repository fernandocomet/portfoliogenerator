{"version":3,"sources":["logo.svg","components/auth/AuthService.js","components/navbar/Navbar.js","components/auth/Signup.js","components/auth/Login.js","components/contents/Contents.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AuthService","signup","username","password","service","post","then","response","data","login","loggedin","get","logout","this","axios","create","baseURL","process","withCredentials","Navbar","props","handleLogout","e","state","loggedInUser","nextProps","setState","className","onClick","src","logo","alt","height","to","Component","Signup","handleFormSubmit","event","preventDefault","getUser","user","catch","error","handleChange","target","name","value","onSubmit","type","onChange","Login","Contents","App","userObj","fetchUser","err","Fragment","userInSession","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.3e54b29b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\n\nclass AuthService {\n  constructor() {\n    this.service = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL}/auth`,\n      withCredentials: true\n    });\n  }\n\n  signup = (username, password) => {\n    return this.service.post('/signup', {username, password})\n    .then(response => response.data)\n  }\n\n  login = (username, password) => {\n    return this.service.post('/login', {username, password})\n    .then(response => response.data)\n  }\n\n  loggedin = () => {\n    return this.service.get('/currentUser',)\n    .then(response => response.data)\n  }\n\n  logout = () => {\n    return this.service.get('/logout',)\n    .then(response => response.data)\n  }\n}\n\nexport default AuthService;\n\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AuthService from \"../auth/AuthService\";\nimport logo from \"../../logo.svg\";\nimport \"./Navbar.css\"\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { loggedInUser: null };\n    this.service = new AuthService();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({ ...this.state, loggedInUser: nextProps[\"userInSession\"] });\n  }\n\n  handleLogout = e => {\n    this.props.logout();\n  };\n\n  render() {\n    if (this.state.loggedInUser) {\n      return (\n        <nav className=\"nav-style\">\n          <ul>\n            <li>\n              <a onClick={this.handleLogout}>Logout</a>\n            </li>\n          </ul>\n\n          <div className=\"header\">\n            <img src={logo} alt=\"\" height=\"100\"/>\n            <h2>Welcome {this.state.loggedInUser.username} - Ironhacker</h2>\n          </div>\n        </nav>\n      );\n    } else {\n      return (\n        <div>\n          <nav className=\"nav-style\">\n            <ul>\n              <li>\n                <Link to=\"/signup\">Signup</Link>\n              </li>\n              <li>\n                <Link to=\"/login\">Login</Link>\n              </li>\n            </ul>\n          </nav>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport AuthService from './AuthService'\n\n//signup y login son iguales a excepción de el html renderizado y el endpoint de nuestra API rest a la que llamamos\n//uno llama a /signup y el otro a /login usando nuestro AuthService\nclass Signup extends Component {\n  constructor(props){\n    super(props);\n    this.state = { username: '', password: '' };\n    this.service = new AuthService();\n  }\n    \n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    //aquí llamamos al endpoint /signup de nuestra API Rest usando nuestro AuthService\n    this.service.signup(username, password)\n    .then( response => {\n        this.setState({\n            username: \"\", \n            password: \"\",\n        });\n        //aquí elevamos el nuevo usuario una vez creado a App usando getUser via props\n        //por tanto, informamos a App de que el nuevo usuario ha sido creado, provocando un re-render\n        //y mostrando la parte de contenidos. Mira la función getUser de App para más info (date cuenta de que establece el state de App)\n        this.props.getUser(response.user)\n    })\n    .catch(error => {\n      this.setState({\n        username: username,\n        password: password,\n        error: true\n      });\n    })\n  }\n\n  handleChange = (event) => {  \n    const {name, value} = event.target;\n    this.setState({[name]: value});\n  }\n      \n\n  render() {\n    return(\n      <div>\n        <h3>Welcome!, create your account next:</h3>\n\n        <form onSubmit={this.handleFormSubmit}>\n          <fieldset>\n            <label>Username:</label>\n            <input type=\"text\" name=\"username\" value={this.state.username} onChange={ e => this.handleChange(e)}/>\n          </fieldset>\n          \n          <fieldset>\n            <label>Password:</label>\n            <input type=\"password\" name=\"password\" value={this.state.password} onChange={ e => this.handleChange(e)} />\n          </fieldset>\n          \n          <input type=\"submit\" value=\"Sign up\" />\n        </form>\n\n        <h1>{this.state.error ? 'Error' : ''}</h1>\n      </div>\n    )\n  }\n}\n\nexport default Signup;","\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthService from './AuthService'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: '', password: '' };\n    this.service = new AuthService();\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const username = this.state.username;\n    const password = this.state.password;\n\n    this.service.login(username, password)\n      .then(response => {\n        this.setState({\n          username: username,\n          password: password,\n          error: false\n        });\n\n        this.props.getUser(response)\n      })\n      .catch(error => {\n        this.setState({\n          username: username,\n          password: password,\n          error: true\n        });\n      })\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n\n    return (<div>\n      <h3>Please, login to our site</h3>\n\n      <form onSubmit={this.handleFormSubmit}>\n        <fieldset>\n          <label>Username:</label>\n          <input type=\"text\" name=\"username\" value={this.state.username} onChange={e => this.handleChange(e)} />\n        </fieldset>\n\n        <fieldset>\n          <label>Password:</label>\n          <input type=\"password\" name=\"password\" value={this.state.password} onChange={e => this.handleChange(e)} />\n        </fieldset>\n\n        <input type=\"submit\" value=\"Login\" />\n      </form>\n\n      <h1>{this.state.error ? 'Error' : ''}</h1>\n    </div>)\n  }\n}\n\nexport default Login;","import React, { Component } from 'react';\n\n//clase componente que renderiza los contenidos genéricos\n//usando rendering condicional y el componente Switch que ya conocéis podéis mostrar los contenidos oportunos que queráis\nclass Contents extends Component {\n  render() {\n    return (<div>\n        <p>The quick brown fox jumps over the lazy dog.</p>\n        </div>);\n    \n  }\n}\n\nexport default Contents;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\n// import ProjectList from './components/projects/ProjectList';\nimport Navbar from \"./components/navbar/Navbar\";\n// import ProjectDetails from './components/projects/ProjectDetails';\nimport Signup from \"./components/auth/Signup\";\nimport Login from \"./components/auth/Login\";\nimport AuthService from \"./components/auth/AuthService\";\nimport Contents from \"./components/contents/Contents\";\n\n//App es la aplicación base, que se sirve del servicio AuthService para conectar con la bbdd\nclass App extends Component {\n  //en el tiempo de construcción de la aplicación, creamos una instancia del authservice\n  constructor(props) {\n    super(props);\n    //arrancamos el estado con un valor de loggedInUser con nada (luego lo vamos a reemplazar con el valor real)\n    this.state = { loggedInUser: null };\n    this.service = new AuthService();\n\n    this.fetchUser()\n  }\n\n  getUser = userObj => {\n    this.setState({\n      loggedInUser: userObj,\n    });\n  };\n\n  logout = () => {\n    this.service.logout().then(() => {\n      this.setState({ loggedInUser: null });\n    });\n  };\n\n  //este método vuelca la información del usuario y lo guarda en el state de app que siempre puedes revisitar\n  fetchUser() {\n    return this.service\n      .loggedin()\n      .then(response => {\n        this.setState({\n          loggedInUser: response,\n        });\n      })\n      .catch(err => {\n        this.setState({\n          loggedInUser: false,\n        });\n      });\n  }\n\n  render() {\n    //aqui hacemos rendering condicional dependiendo de si tenemos un usuario logeado o no\n    if (this.state.loggedInUser) {\n      //en este caso mostramos los contenidos ya que hay usuario\n      return (\n        <React.Fragment>\n          <Redirect to=\"/home\" />\n\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n              {/* aqui simplemente se muestra un lorem ipsum genérico para que veáis contenidos que solo se muestran a usuarios logeados */}\n              <Contents />\n            </header>\n          </div>\n        </React.Fragment>\n      );\n    } else {\n      //si no estás logeado, mostrar opcionalmente o login o signup\n      return (\n        <React.Fragment>\n          <Redirect to=\"/login\" />\n\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n              <Switch>\n                <Route exact path=\"/signup\" render={() => <Signup getUser={this.getUser} />} />\n                <Route exact path=\"/login\" render={() => <Login getUser={this.getUser} />} />\n                {/* Log in with Google? */}\n              </Switch>\n            </header>\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}